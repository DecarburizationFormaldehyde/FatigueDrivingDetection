import asyncio
import websockets
import json
from io import StringIO
import sys

data = [0.18, 0.05333333333333334, 0.02, 0.10666666666666667, 0.3, 0.2733333333333333, 0.013333333333333334,
        0.04,
        0.08133333333333334, 0.5, 0.006666666666666667, 0.006666666666666667, 0.0, 0.20666666666666667,
        0.09333333333333334, 0.02, 0.04666666666666667, 0.05333333333333334, 0.8466666666666667,
        0.8066666666666666,
        0.06,
        0.006666666666666667, 0.44, 0.41333333333333333, 0.5533333333333333, 0.29333333333333333, 0.06, 0.6,
        0.14666666666666667, 0.04, 0.013333333333333334, 0.24, 0.02666666666666667, 0.21333333333333335,
        0.22266666666666668, 0.17333333333333334, 0.14933333333333335, 0.37066666666666664, 0.23333333333333334,
        0.0,
        0.06,
        0.8866666666666667, 0.94, 0.94, 1.0, 0.9333333333333333, 0.38, 0.28933333333333333, 0.23466666666666666,
        0.17333333333333334, 0.5866666666666667, 0.45466666666666666, 0.25333333333333335, 0.05333333333333334,
        0.3933333333333333, 0.25333333333333335, 0.7466666666666667, 0.52, 0.7333333333333333,
        0.6133333333333333,
        0.9466666666666667, 1.0, 0.8066666666666666, 0.41333333333333333, 0.188, 0.9933333333333333, 1.0,
        0.41333333333333333, 0.2866666666666667, 0.9866666666666667, 0.9933333333333333, 1.0,
        0.9866666666666667,
        0.9866666666666667, 0.58, 0.9933333333333333, 0.14, 0.0, 0.006666666666666667, 0.006666666666666667,
        0.8133333333333334, 1.0, 0.3933333333333333, 0.02666666666666667, 0.0, 0.03066666666666667,
        0.02666666666666667,
        0.006666666666666667, 0.08, 0.0, 0.02, 0.0, 0.0, 0.02, 0.0, 0.04, 0.0013333333333333335, 0.0, 0.0,
        0.133]


async def connect(data):
    # 创建一个用于捕获标准输出的StringIO对象
    stdout_buffer = StringIO()

    # 重定向标准输出到StringIO对象
    sys.stdout = stdout_buffer

    # WebSocket连接事件处理函数
    async def on_open(ws):
        print('WebSocket连接已建立')

        # 构造要发送的数据
        # data = {
        #     'name': 'Alice',
        #     'age': 25,
        #     'city': 'New York'
        # }
        # data=[1,2,3,4,5,6]

        # 将数据转换为JSON字符串并发送给服务器
        await ws.send(json.dumps(data))

    # WebSocket消息接收事件处理函数
    async def on_message(ws, message):
        print('接收到服务器消息:', message)
        # 在这里处理服务器返回的数据

        # 关闭WebSocket连接
        # await ws.close()

    # WebSocket关闭事件处理函数
    async def on_close(ws):
        print('WebSocket连接已关闭')

    async with websockets.connect('ws://localhost:8080') as ws:
        # 调用连接建立时的事件处理函数
        await on_open(ws)

        # 循环接收服务器消息
        while True:
            message = await ws.recv()
            await on_message(ws, message)

        # 调用连接关闭时的事件处理函数
        # await on_close(ws)
    # 获取控制台输出的数据
    console_output = stdout_buffer.getvalue()

    # 恢复标准输出
    sys.stdout = sys.__stdout__

    return console_output


# 运行连接函数
asyncio.get_event_loop().run_until_complete(connect(data))
